/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#define ZMK_POINTING_DEFAULT_MOVE_VAL 800  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2         


#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <zmk-helpers/key-labels/42.h>

&sk {
  release-after-ms = <1000>;
  quick-release;
  lazy;
  ignore-modifiers;
};

&mmv {
      acceleration-exponent = <1>;          // 1
      time-to-max-speed-ms = <500>;         // 300
      delay-ms = <0>;                       // 0
};

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2>;
        };

        vol_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <11 23>;
        };

        vol_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <23 35>;
        };

        CAPS_LOCK {
            bindings = <&kp CAPSLOCK>;
            key-positions = <5 6>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <10 9>;
        };
    };

    macros {
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>, <&macro_press>;

            label = "ARROW_FUNC";
        };
    };


    behaviors {

        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
        
        arrow_func_tap: arrow_func_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "ARROW_FUNC_TAP";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&arrow_func>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LMETA  &kp Q      &kp W           &kp E             &kp R        &kp T        &kp Y      &kp U            &kp I                &kp O           &kp P         &kp DELETE
&kp LCTRL  &bhm LMETA A  &bhm LEFT_ALT S  &bhm LEFT_SHIFT D  &bhm LCTRL F  &kp G        &kp H      &bhm RCTRL J      &bhm RIGHT_SHIFT K    &bhm LEFT_ALT L  &bhm LMETA SEMICOLON  &kp SQT
&sk LSHFT  &kp Z      &kp X           &kp C             &kp V        &kp B        &kp N      &kp M            &kp COMMA            &kp DOT         &kp FSLH      &kp RIGHT_ALT
                                      &kp LCTRL         &lt 1 SPACE  &lt 4 TAB    &lt 3 RET  &lt 2 BACKSPACE  &sk RIGHT_SHIFT
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans    &trans    &trans          &trans            &trans    &mkp LCLK          &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp RCLK
&trans  &kp LGUI  &kp LALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &trans    &kp K_APPLICATION  &kp LEFT        &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT        &kp K_CMENU
&trans  &trans    &trans    &trans          &trans            &trans    &mkp MB4           &kp HOME        &kp PAGE_DOWN   &kp PG_UP     &kp END          &mkp MB5
                            &trans          &trans            &trans    &trans             &trans          &trans
            >;
        };

        symb_layer {
            bindings = <
&trans  &kp EXCLAMATION       &kp QUESTION     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS        &kp DOLLAR      &kp GRAVE         &kp LS(PERCENT)           &kp LS(NUMBER_3)   &kp CARET            &trans
&trans  &kp LESS_THAN         &arrow_func_tap  &bhm LEFT_SHIFT LEFT_PARENTHESIS  &bhm LCTRL RIGHT_PARENTHESIS  &kp MINUS       &kp EQUAL       &bhm RCTRL SINGLE_QUOTE   &bhm RIGHT_SHIFT AMPERSAND             &kp DOUBLE_QUOTES  &kp LS(SEMICOLON)    &trans
&trans  &kp NON_US_BACKSLASH  &kp SLASH        &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp ASTERISK    &kp UNDERSCORE  &kp AT_SIGN       &kp LS(NON_US_BACKSLASH)  &kp NON_US_HASH    &kp LS(NON_US_HASH)  &trans
                                               &trans                &trans                 &trans          &trans          &trans            &trans
            >;
        };

        num_layer {
            bindings = <
&kp ESC  &kp F1      &kp F2      &kp F3      &kp F4      &kp F5        &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &kp F11
&trans   &kp N1      &kp N2      &kp N3      &bhm LCTRL N4      &kp N5        &kp N6      &bhm RCTRL N7      &kp N8      &kp N9      &kp N0      &trans
&trans   &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)  &trans
                                 &trans      &trans      &trans        &trans      &trans      &trans
            >;
        };

        kb_utils {
            bindings = <
&bootloader  &none          &none         &none         &none         &none           &none  &none             &none           &none       &none  &studio_unlock
&none        &none          &none         &none         &none         &none           &none  &kp K_PLAY_PAUSE  &kp K_PREVIOUS  &kp K_NEXT  &none  &none
&bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none             &none           &none       &none  &none
                                          &none         &none         &none           &none  &none             &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
