/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */


#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    combos {
        compatible = "zmk,combos";

        caps_word {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };

        esc {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        vol_up {
            bindings = <&kp C_VOLUME_UP>;
            key-positions = <11 23>;
        };

        vol_down {
            bindings = <&kp C_VOLUME_DOWN>;
            key-positions = <23 35>;
        };

        play_pause {
            bindings = <&kp K_PLAY_PAUSE>;
            key-positions = <11 23 35>;
        };
    };

    macros {
        arrow_func: arrow_func {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp EQUAL &kp GT>, <&macro_press>;

            label = "ARROW_FUNC";
        };
    };

    behaviors {
        arrow_func_tap: arrow_func_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "ARROW_FUNC_TAP";
            #binding-cells = <0>;
            bindings = <&kp GREATER_THAN>, <&arrow_func>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BSPC |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp LMETA  &kp Q  &kp W  &kp E      &kp R        &kp T        &kp Y      &kp U            &kp I            &kp O    &kp P     &kp DELETE
&kp LCTRL  &kp A  &kp S  &kp D      &kp F        &kp G        &kp H      &kp J            &kp K            &kp L    &kp SEMI  &kp SQT
&kp LSHFT  &kp Z  &kp X  &kp C      &kp V        &kp B        &kp N      &kp M            &kp COMMA        &kp DOT  &kp FSLH  &kp RIGHT_ALT
                         &kp LCTRL  &lt 1 SPACE  &lt 4 TAB    &lt 3 RET  &lt 2 BACKSPACE  &kp RIGHT_SHIFT
            >;
        };

        nav_layer {
            bindings = <
&trans  &trans      &trans     &trans      &trans       &trans    &mkp LCLK   &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &mkp RCLK
&trans  &kp LGUI    &kp LALT   &kp LCTRL   &kp LSHFT    &trans    &none       &kp LEFT        &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT        &kp K_MENU
&trans  &kp K_UNDO  &kp K_CUT  &kp K_COPY  &kp K_PASTE  &trans    &kp K_BACK  &kp HOME        &kp PAGE_DOWN   &kp PG_UP     &kp END          &kp K_FORWARD
                               &trans      &trans       &trans    &trans      &trans          &trans
            >;
        };

        symb_layer {
            bindings = <
&trans  &kp EXCLAMATION  &kp QUESTION          &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp PLUS     &kp DOLLAR      &kp GRAVE         &kp LS(NUBS)       &kp LS(NON_US_HASH)  &kp CARET      &trans
&trans  &kp LESS_THAN    &arrow_func_tap       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp MINUS    &kp EQUAL       &kp SINGLE_QUOTE  &kp NON_US_HASH    &kp ASTERISK         &kp AMPERSAND  &trans
&trans  &none            &kp NON_US_BACKSLASH  &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SLASH    &kp UNDERSCORE  &kp AT_SIGN       &kp DOUBLE_QUOTES  &kp PERCENT          &kp HASH       &trans
                                               &trans                &trans                 &trans       &trans          &trans            &trans
            >;
        };

        num_layer {
            bindings = <
&kp ESC         &kp F1      &kp F2      &kp F3      &kp F4      &kp F5        &kp F6      &kp F7      &kp F8      &kp F9      &kp F10     &kp F11
&kp LCTRL       &kp N1      &kp N2      &kp N3      &kp N4      &kp N5        &kp N6      &kp N7      &kp N8      &kp N9      &kp N0      &kt RCTRL
&kp LEFT_SHIFT  &kp LS(N1)  &kp LS(N2)  &kp LS(N3)  &kp LS(N4)  &kp LS(N5)    &kp LS(N6)  &kt LS(N7)  &kt LS(N8)  &kt LS(N9)  &kt LS(N0)  &kt RSHFT
                                        &trans      &trans      &trans        &trans      &trans      &trans
            >;
        };

        layer_4 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        kb_utils {
            bindings = <
&bootloader  &none          &none         &none         &none         &none           &none   &none  &none  &none  &none  &none
&none        &bt BT_DISC 0  &none         &none         &none         &none           &none   &none  &none  &none  &none  &none
&bt BT_CLR   &bt BT_SEL 0   &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none   &none  &none  &none  &none  &none
                                          &none         &none         &trans          &trans  &none  &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <3 4>;
            then-layer = <5>;
        };
    };
};
